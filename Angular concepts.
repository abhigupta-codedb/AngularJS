1>Angular 1 has 70+ directives like ng-if, ng-model etc., whereas Angular has very less number of 
directives as we use [ ] and ( ) for bindings in HTML elements.

2>Component-based

Angular follows component based programming which is the future of web development.
Each component we create is isolated from every other part of our application. 
This kind of programming allows us to use components written using other frameworks.

Inside a component, we write both business logic and view.

Every Angular application will have one top-level component and several sub components.

3>
e2e/->This folder contains all End-to-End (e2e) tests of the application written in Jasmine and run by the Protractor

node_modules/->Node.js creates this folder and puts all npm modules installed as listed in package.json

src/->All application related files will be stored inside it

angular.json->Configuration file for Angular CLI where we set several defaults and also configure what files to be included during project build

package.json->This is node configuration file which contains all dependencies required for Angular

tsconfig.json->This is Typescript configuration file where we can configure compiler options

tslint.json->This file contains linting rules preferred by Angular style guide

4>Accessing the class property by placing property called title inside {{ }}. 
This is called interpolation which is one of the data binding mechanism to access 
class properties inside template

5>A module in Angular is a class with @NgModule decorator added to it. @NgModule metadata 
will contain the declarations of components, pipes, directives, services which are to be used across the application.

6>Interpolation is one of the form of data binding where we can access component’s data in a template.
For interpolation, we use double curly braces {{ }}.

7>if we write {{ courseName }},courseName should be the property of the 
component to which this template is bound to.

8>Angular applications runs  faster than Angular 1.x applications due to its 
improved change detection mechanism.

9>Angular runs a change detector algorithm on each component from top to bottom in the component tree.
This change detector algorithm is automatically generated at run time which will check and update the changes at appropriate places in the component tree.

10>Directives are used to change the behavior of components or elements.
We can use directives in the form of HTML attributes.

11>We create directives using classes attached 
with @Directive decorator which adds metadata to the class,@Component decorator is actually @Directive with templates

12>Directives types--Components,Structural Directives(ngIf,ngFor,ngSwitch),Attribute Directives(ngStyle, ngClass)

13>We use property binding when we want to set the property of a class with the property of an element

14>Attribute binding can be used to bind component property to the attribute directly

15>Attribute binding syntax starts with prefix attr. followed by a dot sign and the name of an attribute.

16>Style binding is used to set inline styles. Syntax starts with prefix style,
followed by a dot and the name of a CSS style property.Then set the attribute value to an expression

17>Two way binding
-->It is a mechanism where if model property value changes, it updates the element to which the property 
is binded to and vice versa. It uses [()] (banana in a box)
-->Bind name property with text box using ngModel placed in [()] which is representation of two way data binding. 
Here whatever we type in the textbox at run time will be assigned to property name and when we change name property value, it will be reflected in the textbox

18>Pipes
-->A pipe can also have optional parameters to change the output. To pass parameters, after a pipe name add a colon( : ) followed by the parameter value.   

===Nested Component====
-->We are loading root component in index.html page using its selector name, similarly if we want to load one component into another one, 
   we will load it using its selector name in the template i.e., html page of container component
-->We can use @Input decorator in the child component on any property type like arrays, objects etc.

-->If a child component wants to send data to its parent component, then it must create a property with @Output decorator

-->The only method for child component to pass data to its parent component is through events.The property must be of type EventEmitter

====component lifecycle=====
1>A component has a life cycle which is managed by Angular. It includes creating a component, rendering it, 
creating and rendering its child components, checks when its data bound properties change and destroys it before removing it from the DOM.

2>Angular has some methods/hooks which provides visibility into these key life moments of a component and the ability to act when they occur.

ngOnChanges – It will be invoked when Angular sets data bound input property i.e., property attached with @Input().
	      This will be invoked whenever input property changes its value

ngOnInit – It will be invoked when Angular initializes the directive or component

ngDoCheck -  It will be invoked for every change detection in the application

ngAfterContentInit – It will be invoked after Angular projects content into its view

ngAfterContentChecked – It will be invoked after Angular checks the bindings of the content it projected into its view

ngAfterViewInit – It will be invoked after Angular creates component’s views

ngAfterViewChecked – It will be invoked after Angular checks the bindings of the component’s views

ngOnDestroy – It will be invoked before Angular destroys directive or component

==>ngOnInit() is the first method to be invoked for AppComponent. Whenever data property value changes it invokes ngDoCheck() method. 
All Init methods will be invoked only once at the beginning and fromlater on whenever change happens Angular invokes ngDoCheck, 
ngAfterContentChecked and ngAfterViewChecked methods

===============FORMS in ANGULAR===========================
-->Template driven Forms - Used to create small to medium sized forms
   In template driven form, data binding, validation etc., will be written in the template itself.

Model driven Forms or Reactive Forms - Used to create large size forms

======Dependency Injection=============================
1>Dependency Injection (DI) is a mechanism where the required resources will be injected into the code automatically.

DI allows developers to reuse the code across application.

DI makes the code loosely coupled.

DI makes the application development and testing much easier.

DI allows the developer to ask for the dependencies from Angular. There is no need for the developer to explicitly create/instantiate them.
======services=========================================
1>The first way to register a service is to specify 
providedIn property using @injectable decorator.

2>Angular also optimizes the application if registered through 
providedIn property by removing the service class if none of the components uses it .

3>Services can also be provided across providers property 
in @Ngmodule decorator of any module

4>There is also a way to limit scope of the service class by registering 
it inside the providers array inside @Component decorator 

5>Add providers property in the module class so that 
service class is available to the entire application.

6>If service is needed only for specific component(s), it 
can be added in those component classes instead of module.
Add a constructor in a component class with Service class as argument. 

7>Observables, in RxJS, are used to represent asynchronous streams of data. 
Observables are more advanced version of Promises in JavaScript

8>Promise is a javascript object which returns data asynchronously.

9>Promise has then() method which will be invoked when promise response is received from service class. 
then() has success callback function where the response received will be passed to the parameter books which in turn assigns it to the local variable books
====why RxJS=======================
Why RxJS Observables?
Angular team has recommended Observables for asynchronous calls because of the following reasons:

Promises emit a single value whereas observables (streams) emit many values

Observables can be cancellable where Promises are not cancellable. If any http response is not required, observables allows us to cancel the subscription whereas promises execute either success or failure callback even if we don’t need the result

Observables support functional operators such as map, filter, reduce etc
========server communication using http==========
1>When we make calls to an external server, we want our user to continue to be able to interact with the page. 
That is, we don’t want our page to freeze until the HTTP request returns from the external server. 
So, all HTTP requests are asynchronous
===========Route Guards==================
In Angular application, user can navigate to any url directly. That's not the right thing to do always

-->Angular has canActivate interface which can be used to check if a user is logged in to access a component

-->We need to override canActivate() method in the guard class as shown below
